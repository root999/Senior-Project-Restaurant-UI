// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication5.Models;

namespace WebApplication5.Migrations
{
    [DbContext(typeof(dbContext))]
    [Migration("20210131210919_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("WebApplication5.Models.AccountEmailaddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(254)")
                        .HasColumnName("email");

                    b.Property<byte[]>("Primary")
                        .IsRequired()
                        .HasColumnType("bool")
                        .HasColumnName("primary");

                    b.Property<long>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<byte[]>("Verified")
                        .IsRequired()
                        .HasColumnType("bool")
                        .HasColumnName("verified");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_account_emailaddress_email")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "account_emailaddress_user_id_2c513194");

                    b.ToTable("account_emailaddress");
                });

            modelBuilder.Entity("WebApplication5.Models.AccountEmailconfirmation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<byte[]>("Created")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<long>("EmailAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("email_address_id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("key");

                    b.Property<byte[]>("Sent")
                        .HasColumnType("datetime")
                        .HasColumnName("sent");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Key" }, "IX_account_emailconfirmation_key")
                        .IsUnique();

                    b.HasIndex(new[] { "EmailAddressId" }, "account_emailconfirmation_email_address_id_5b7f8c58");

                    b.ToTable("account_emailconfirmation");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_auth_group_name")
                        .IsUnique();

                    b.ToTable("auth_group");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthGroupPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupId" }, "auth_group_permissions_group_id_b120cbf9");

                    b.HasIndex(new[] { "GroupId", "PermissionId" }, "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
                        .IsUnique();

                    b.HasIndex(new[] { "PermissionId" }, "auth_group_permissions_permission_id_84c5c92e");

                    b.ToTable("auth_group_permissions");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Codename")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codename");

                    b.Property<long>("ContentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("content_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentTypeId" }, "auth_permission_content_type_id_2f476e4b");

                    b.HasIndex(new[] { "ContentTypeId", "Codename" }, "auth_permission_content_type_id_codename_01ab375a_uniq")
                        .IsUnique();

                    b.ToTable("auth_permission");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<byte[]>("DateJoined")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("date_joined");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("first_name");

                    b.Property<byte[]>("IsActive")
                        .IsRequired()
                        .HasColumnType("bool")
                        .HasColumnName("is_active");

                    b.Property<byte[]>("IsStaff")
                        .IsRequired()
                        .HasColumnType("bool")
                        .HasColumnName("is_staff");

                    b.Property<byte[]>("IsSuperuser")
                        .IsRequired()
                        .HasColumnType("bool")
                        .HasColumnName("is_superuser");

                    b.Property<byte[]>("LastLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Username" }, "IX_auth_user_username")
                        .IsUnique();

                    b.ToTable("auth_user");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthUserGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<long>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "GroupId" }, "auth_user_groups_group_id_97559544");

                    b.HasIndex(new[] { "UserId" }, "auth_user_groups_user_id_6a12ed8b");

                    b.HasIndex(new[] { "UserId", "GroupId" }, "auth_user_groups_user_id_group_id_94350c0c_uniq")
                        .IsUnique();

                    b.ToTable("auth_user_groups");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthUserUserPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.Property<long>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "PermissionId" }, "auth_user_user_permissions_permission_id_1fbb5f2c");

                    b.HasIndex(new[] { "UserId" }, "auth_user_user_permissions_user_id_a95ead1b");

                    b.HasIndex(new[] { "UserId", "PermissionId" }, "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
                        .IsUnique();

                    b.ToTable("auth_user_user_permissions");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthtokenToken", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("key");

                    b.Property<byte[]>("Created")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("created");

                    b.Property<long>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Key");

                    b.HasIndex(new[] { "UserId" }, "IX_authtoken_token_user_id")
                        .IsUnique();

                    b.ToTable("authtoken_token");
                });

            modelBuilder.Entity("WebApplication5.Models.DjangoAdminLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("ActionFlag")
                        .HasColumnType("smallint unsigned")
                        .HasColumnName("action_flag");

                    b.Property<byte[]>("ActionTime")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("action_time");

                    b.Property<string>("ChangeMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("change_message");

                    b.Property<long?>("ContentTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("content_type_id");

                    b.Property<string>("ObjectId")
                        .HasColumnType("text")
                        .HasColumnName("object_id");

                    b.Property<string>("ObjectRepr")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("object_repr");

                    b.Property<long>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContentTypeId" }, "django_admin_log_content_type_id_c4bce8eb");

                    b.HasIndex(new[] { "UserId" }, "django_admin_log_user_id_c564eba6");

                    b.ToTable("django_admin_log");
                });

            modelBuilder.Entity("WebApplication5.Models.DjangoContentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("AppLabel")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("app_label");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("model");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AppLabel", "Model" }, "django_content_type_app_label_model_76bd3d3b_uniq")
                        .IsUnique();

                    b.ToTable("django_content_type");
                });

            modelBuilder.Entity("WebApplication5.Models.DjangoMigration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("App")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("app");

                    b.Property<byte[]>("Applied")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("applied");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("django_migrations");
                });

            modelBuilder.Entity("WebApplication5.Models.DjangoSession", b =>
                {
                    b.Property<string>("SessionKey")
                        .HasColumnType("varchar(40)")
                        .HasColumnName("session_key");

                    b.Property<byte[]>("ExpireDate")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("expire_date");

                    b.Property<string>("SessionData")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("session_data");

                    b.HasKey("SessionKey");

                    b.HasIndex(new[] { "ExpireDate" }, "django_session_expire_date_a5c62663");

                    b.ToTable("django_session");
                });

            modelBuilder.Entity("WebApplication5.Models.DjangoSite", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("domain");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Domain" }, "IX_django_site_domain")
                        .IsUnique();

                    b.ToTable("django_site");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiCustomer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<byte[]>("DateJoined")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("date_joined");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("first_name");

                    b.Property<byte[]>("IsActive")
                        .IsRequired()
                        .HasColumnType("bool")
                        .HasColumnName("is_active");

                    b.Property<byte[]>("IsStaff")
                        .IsRequired()
                        .HasColumnType("bool")
                        .HasColumnName("is_staff");

                    b.Property<byte[]>("IsSuperuser")
                        .IsRequired()
                        .HasColumnType("bool")
                        .HasColumnName("is_superuser");

                    b.Property<byte[]>("LastLogin")
                        .HasColumnType("datetime")
                        .HasColumnName("last_login");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(150)")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(128)")
                        .HasColumnName("password");

                    b.Property<string>("Surname")
                        .HasColumnType("varchar(100)")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Email" }, "IX_myapi_customer_email")
                        .IsUnique();

                    b.ToTable("myapi_customer");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiCustomerGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<long>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "myapi_customer_groups_customer_id_3dc5a130");

                    b.HasIndex(new[] { "CustomerId", "GroupId" }, "myapi_customer_groups_customer_id_group_id_e86fdd48_uniq")
                        .IsUnique();

                    b.HasIndex(new[] { "GroupId" }, "myapi_customer_groups_group_id_32060ea0");

                    b.ToTable("myapi_customer_groups");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiCustomerUserPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("integer")
                        .HasColumnName("permission_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "myapi_customer_user_permissions_customer_id_a432a236");

                    b.HasIndex(new[] { "CustomerId", "PermissionId" }, "myapi_customer_user_permissions_customer_id_permission_id_84f4ef75_uniq")
                        .IsUnique();

                    b.HasIndex(new[] { "PermissionId" }, "myapi_customer_user_permissions_permission_id_c232764c");

                    b.ToTable("myapi_customer_user_permissions");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiMenu", b =>
                {
                    b.Property<long>("RestaurantId")
                        .HasColumnType("integer")
                        .HasColumnName("restaurant_id");

                    b.HasKey("RestaurantId");

                    b.ToTable("myapi_menu");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiMenuProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("MenuId")
                        .HasColumnType("integer")
                        .HasColumnName("menu_id");

                    b.Property<long>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MenuId" }, "myapi_menu_products_menu_id_c3137229");

                    b.HasIndex(new[] { "MenuId", "ProductId" }, "myapi_menu_products_menu_id_product_id_ed15ea1e_uniq")
                        .IsUnique();

                    b.HasIndex(new[] { "ProductId" }, "myapi_menu_products_product_id_20e5825a");

                    b.ToTable("myapi_menu_products");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date")
                        .HasColumnName("issueDate");

                    b.Property<DateTime>("IssueTime")
                        .HasColumnType("time")
                        .HasColumnName("issueTime");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("date")
                        .HasColumnName("plannedDate");

                    b.Property<DateTime>("PlannedTime")
                        .HasColumnType("time")
                        .HasColumnName("plannedTime");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("integer")
                        .HasColumnName("restaurant_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CustomerId" }, "myapi_order_customer_id_60b6f946");

                    b.HasIndex(new[] { "RestaurantId" }, "myapi_order_restaurant_id_a36a0c36");

                    b.ToTable("myapi_order");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiOrderOrderedProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<long>("ProductCount")
                        .HasColumnType("integer")
                        .HasColumnName("productCount");

                    b.Property<long>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, " myapi_order_orderedProducts_order_id_d9ef4a5a");

                    b.HasIndex(new[] { "ProductId" }, " myapi_order_orderedProducts_product_id_51217bdf");

                    b.ToTable(" myapi_order_orderedProducts");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("details");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("photoUrl");

                    b.Property<double>("Price")
                        .HasColumnType("decimal")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("myapi_product");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiProductsinorder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<long>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<long>("ProductCount")
                        .HasColumnType("integer")
                        .HasColumnName("productCount");

                    b.Property<long>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, "myapi_productsinorder_order_id_210cc500");

                    b.HasIndex(new[] { "ProductId" }, "myapi_productsinorder_product_id_a32e6c07");

                    b.ToTable("myapi_productsinorder");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiRestaurant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasColumnName("address");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("logoUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("myapi_restaurant");
                });

            modelBuilder.Entity("WebApplication5.Models.AccountEmailaddress", b =>
                {
                    b.HasOne("WebApplication5.Models.MyapiCustomer", "User")
                        .WithMany("AccountEmailaddresses")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication5.Models.AccountEmailconfirmation", b =>
                {
                    b.HasOne("WebApplication5.Models.AccountEmailaddress", "EmailAddress")
                        .WithMany("AccountEmailconfirmations")
                        .HasForeignKey("EmailAddressId")
                        .IsRequired();

                    b.Navigation("EmailAddress");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthGroupPermission", b =>
                {
                    b.HasOne("WebApplication5.Models.AuthGroup", "Group")
                        .WithMany("AuthGroupPermissions")
                        .HasForeignKey("GroupId")
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.AuthPermission", "Permission")
                        .WithMany("AuthGroupPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthPermission", b =>
                {
                    b.HasOne("WebApplication5.Models.DjangoContentType", "ContentType")
                        .WithMany("AuthPermissions")
                        .HasForeignKey("ContentTypeId")
                        .IsRequired();

                    b.Navigation("ContentType");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthUserGroup", b =>
                {
                    b.HasOne("WebApplication5.Models.AuthGroup", "Group")
                        .WithMany("AuthUserGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.AuthUser", "User")
                        .WithMany("AuthUserGroups")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthUserUserPermission", b =>
                {
                    b.HasOne("WebApplication5.Models.AuthPermission", "Permission")
                        .WithMany("AuthUserUserPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.AuthUser", "User")
                        .WithMany("AuthUserUserPermissions")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthtokenToken", b =>
                {
                    b.HasOne("WebApplication5.Models.MyapiCustomer", "User")
                        .WithOne("AuthtokenToken")
                        .HasForeignKey("WebApplication5.Models.AuthtokenToken", "UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication5.Models.DjangoAdminLog", b =>
                {
                    b.HasOne("WebApplication5.Models.DjangoContentType", "ContentType")
                        .WithMany("DjangoAdminLogs")
                        .HasForeignKey("ContentTypeId");

                    b.HasOne("WebApplication5.Models.AuthUser", "User")
                        .WithMany("DjangoAdminLogs")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiCustomerGroup", b =>
                {
                    b.HasOne("WebApplication5.Models.MyapiCustomer", "Customer")
                        .WithMany("MyapiCustomerGroups")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.AuthGroup", "Group")
                        .WithMany("MyapiCustomerGroups")
                        .HasForeignKey("GroupId")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiCustomerUserPermission", b =>
                {
                    b.HasOne("WebApplication5.Models.MyapiCustomer", "Customer")
                        .WithMany("MyapiCustomerUserPermissions")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.AuthPermission", "Permission")
                        .WithMany("MyapiCustomerUserPermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiMenu", b =>
                {
                    b.HasOne("WebApplication5.Models.MyapiRestaurant", "Restaurant")
                        .WithOne("MyapiMenu")
                        .HasForeignKey("WebApplication5.Models.MyapiMenu", "RestaurantId")
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiMenuProduct", b =>
                {
                    b.HasOne("WebApplication5.Models.MyapiMenu", "Menu")
                        .WithMany("MyapiMenuProducts")
                        .HasForeignKey("MenuId")
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.MyapiProduct", "Product")
                        .WithMany("MyapiMenuProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiOrder", b =>
                {
                    b.HasOne("WebApplication5.Models.MyapiCustomer", "Customer")
                        .WithMany("MyapiOrders")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.MyapiRestaurant", "Restaurant")
                        .WithMany("MyapiOrders")
                        .HasForeignKey("RestaurantId")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiOrderOrderedProduct", b =>
                {
                    b.HasOne("WebApplication5.Models.MyapiOrder", "Order")
                        .WithMany("MyapiOrderOrderedProducts")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.MyapiProduct", "Product")
                        .WithMany("MyapiOrderOrderedProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiProductsinorder", b =>
                {
                    b.HasOne("WebApplication5.Models.MyapiOrder", "Order")
                        .WithMany("MyapiProductsinorders")
                        .HasForeignKey("OrderId")
                        .IsRequired();

                    b.HasOne("WebApplication5.Models.MyapiProduct", "Product")
                        .WithMany("MyapiProductsinorders")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication5.Models.AccountEmailaddress", b =>
                {
                    b.Navigation("AccountEmailconfirmations");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthGroup", b =>
                {
                    b.Navigation("AuthGroupPermissions");

                    b.Navigation("AuthUserGroups");

                    b.Navigation("MyapiCustomerGroups");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthPermission", b =>
                {
                    b.Navigation("AuthGroupPermissions");

                    b.Navigation("AuthUserUserPermissions");

                    b.Navigation("MyapiCustomerUserPermissions");
                });

            modelBuilder.Entity("WebApplication5.Models.AuthUser", b =>
                {
                    b.Navigation("AuthUserGroups");

                    b.Navigation("AuthUserUserPermissions");

                    b.Navigation("DjangoAdminLogs");
                });

            modelBuilder.Entity("WebApplication5.Models.DjangoContentType", b =>
                {
                    b.Navigation("AuthPermissions");

                    b.Navigation("DjangoAdminLogs");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiCustomer", b =>
                {
                    b.Navigation("AccountEmailaddresses");

                    b.Navigation("AuthtokenToken");

                    b.Navigation("MyapiCustomerGroups");

                    b.Navigation("MyapiCustomerUserPermissions");

                    b.Navigation("MyapiOrders");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiMenu", b =>
                {
                    b.Navigation("MyapiMenuProducts");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiOrder", b =>
                {
                    b.Navigation("MyapiOrderOrderedProducts");

                    b.Navigation("MyapiProductsinorders");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiProduct", b =>
                {
                    b.Navigation("MyapiMenuProducts");

                    b.Navigation("MyapiOrderOrderedProducts");

                    b.Navigation("MyapiProductsinorders");
                });

            modelBuilder.Entity("WebApplication5.Models.MyapiRestaurant", b =>
                {
                    b.Navigation("MyapiMenu");

                    b.Navigation("MyapiOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
